// Generated by view binder compiler. Do not edit!
package com.binar.ccgameandprofile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.binar.ccgameandprofile.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogUpdateBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnUpdateCancel;

  @NonNull
  public final Button btnUpdateDelete;

  @NonNull
  public final Button btnUpdateUpdate;

  @NonNull
  public final EditText etUpdateIsi;

  @NonNull
  public final EditText etUpdateTanggal;

  private DialogUpdateBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnUpdateCancel,
      @NonNull Button btnUpdateDelete, @NonNull Button btnUpdateUpdate,
      @NonNull EditText etUpdateIsi, @NonNull EditText etUpdateTanggal) {
    this.rootView = rootView;
    this.btnUpdateCancel = btnUpdateCancel;
    this.btnUpdateDelete = btnUpdateDelete;
    this.btnUpdateUpdate = btnUpdateUpdate;
    this.etUpdateIsi = etUpdateIsi;
    this.etUpdateTanggal = etUpdateTanggal;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogUpdateBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogUpdateBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_update, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogUpdateBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_update_cancel;
      Button btnUpdateCancel = rootView.findViewById(id);
      if (btnUpdateCancel == null) {
        break missingId;
      }

      id = R.id.btn_update_delete;
      Button btnUpdateDelete = rootView.findViewById(id);
      if (btnUpdateDelete == null) {
        break missingId;
      }

      id = R.id.btn_update_update;
      Button btnUpdateUpdate = rootView.findViewById(id);
      if (btnUpdateUpdate == null) {
        break missingId;
      }

      id = R.id.et_update_isi;
      EditText etUpdateIsi = rootView.findViewById(id);
      if (etUpdateIsi == null) {
        break missingId;
      }

      id = R.id.et_update_tanggal;
      EditText etUpdateTanggal = rootView.findViewById(id);
      if (etUpdateTanggal == null) {
        break missingId;
      }

      return new DialogUpdateBinding((ConstraintLayout) rootView, btnUpdateCancel, btnUpdateDelete,
          btnUpdateUpdate, etUpdateIsi, etUpdateTanggal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
